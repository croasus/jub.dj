unless chatonly
  div(class='col-md-9', style='padding-right:0; padding-left: 8px;')
    table(class='table', id='next-dj-banner',
          style='margin-bottom: 0px; margin-top: 6px; width: 100%;')
      tbody
        tr
          td(id='up-next-label', style='visibility:hidden;', rowspan=2) Next:
          td(id='next-track')
          unless chatonly
            td(id='join-dj-td', rowspan=2)
              if loggedIn
                button(class='btn btn-default', type='button', id='join-dj',
                       data-toggle='tooltip', data-placement='top',
                       style='margin-top: 11px; float: right; position: relative; top: -5px;'
                       title='Click to DJ')
                  span(id='join-dj-icon', class='glyphicon glyphicon-headphones')
        tr
          td(id='next-dj')
            span(id='next-dj-by-span',
                 style='visibility:hidden;') by
            span(id='next-dj-name')
if chatonly
  div(class='container-fluid', style='padding-right:0px;')
    form(id='chat', action='')
      input(class='form-control jub-nav-input',
            id='chat-input', autocomplete='off',
            style='display:inline-block;',
            placeholder='Chat')
else
  div(class='col-md-3', style='padding-right:0px;')
    form(id='chat', action='')
      input(class='form-control jub-nav-input',
            id='chat-input', autocomplete='off',
            style='display:inline-block;',
            placeholder='Chat')
script.

  // DJ button
  $('#join-dj').on('click', function() {
    if (!djing) {
      socket.emit('add dj');
      console.log("add dj");
      djing = true;
    } else {
      socket.emit('remove dj');
      console.log("remove dj");
      djing = false;
    }
    drawDjState();
  });

  // Some other part of the page wants to set the DJ state
  $('#join-dj').on('set-dj-state', function(e, newState) {
    console.log('dj-state', newState);
    djing = newState;
    drawDjState();
  });

  // Server assigns 'djing' state
  socket.on('user djing', function(state) {
    $('#join-dj').trigger('set-dj-state', state);
  });

  // Server assigns 'djing' state
  socket.on('up next', function(list) {
    console.log("up next", list);
    var nextDj = $('#next-dj-name');
    var nextTrack = $('#next-track');
    var nextDur = $('<span>').addClass('next-duration');
    var labels = $('#up-next-label,#next-dj-by-span');
    if (list.length > 0) {
      var first = list[0];
      var durFormatted = "";
      if(areVideoClipSettingsValid(first)) {
        durFormatted = formatTime((first.clipEndTime - first.clipStartTime) / 1000);
      }
      else {
        durFormatted = formatTime(first.duration / 1000);
      }
      nextDj.text(first.user);
      if (first.userColor) { nextDj.css({'color': first.userColor}) }
      nextDj.attr('title', first.user);

      nextTrack.text(first.title);
      nextDur.text(durFormatted);
      nextTrack.append(nextDur);

      nextTrack.attr('title', first.title + ' ' + durFormatted);
      labels.css('visibility', 'visible');
    } else {
      nextDj.text('');
      nextTrack.text('');
      labels.css('visibility', 'hidden');
    }
    refreshSizes();
  });

  function drawDjState() {
    var elem = $('#join-dj');
    if (djing) {
      elem.css('background', '#2DB85A');
      elem.css('color', '#000');
      $('#join-dj-icon').attr('class', 'glyphicon glyphicon-headphones');
      $('#join-dj').attr('title', 'Stop DJing');
    } else {
      elem.css('background', '#3F2C52');
      elem.css('color', '#FFFFFF');
      $('#join-dj-icon').attr('class', 'glyphicon glyphicon-headphones');
      $('#join-dj').attr('title', 'Click to DJ');
    }
  }

  function usersStartingWith(text) {
    return _
      .chain(currentUsers)
      .filter(function(o) { return o.name.startsWith(text); })
      .value();
  }

  function getLastWord(text) {
    var words = text.split(' ');
    if (words.length === 0) { return null; }
    return words[words.length - 1];
  }

  function stripPrefixPunct(text) {
    return ifLet(text.match(/^[^a-zA-Z0-9]*(.*)/), function(result) {
      if (result.length > 1) {
        return result[1];
      }
      return '';
    });
  }

  var mentionSuggestion = null;

  // TODO if they are typing a long message and tab-complete past the width
  // of the input, the user will no longer see the cursor.
  function completeMention() {
    if (mentionSuggestion === null) {
      return;
    }
    var input = $('#chat-input');
    var lastWord = stripPrefixPunct(getLastWord(input.val()));
    input.val(input.val() + mentionSuggestion.name.slice(lastWord.length));

    // Optionally add a space after the completed username
    if ($('#add-space-after-mention').is(":checked")) {
      input.val(input.val() + ' ');
    }

    // Do this to remove the suggestion
    updateMentionSuggestion();
  }

  function updateMentionSuggestion(text, left, top, user) {
    var chat = $('#chat-input');
    var chatText = chat.val();

    $('#mention-suggestion').remove();
    mentionSuggestion = null;

    var lastWord = stripPrefixPunct(getLastWord(chatText));

    if (lastWord.length < 2) {
      return;
    }

    var users = usersStartingWith(lastWord);
    if (users.length === 0) {
      return;
    }

    var user = users[0];
    if (user.name === lastWord) {
      return;
    }

    mentionSuggestion = {
      name: user.name,
      color: user.color,
    };


    this.suggestionTimer;
    if (this.suggestionTimer) {
      window.clearTimeout(this.suggestionTimer)
    }
    this.suggestionTimer = window.setTimeout(drawSuggestion, 200);
  }

  function drawSuggestion() {
    if (mentionSuggestion === null) {
      return;
    }
    var chat = $('#chat-input');
    var chatText = chat.val();
    var lastWord = stripPrefixPunct(getLastWord(chatText));
    var suggestion = $('<div id="mention-suggestion">');

    suggestion.css({
      position: 'absolute',
      height: 'auto', width: 'auto',
      padding: '2px 5px 2px 5px',
      color: mentionSuggestion.color,
      fontWeight: 'bold',
      backgroundColor: '#000000',
      zIndex:9999,
      whiteSpace: 'nowrap',
      border: '1px solid #444',
      overflowX: 'hidden',
    });


    var chatPaddingLeft = parseInt(chat.css('padding-left'), 10);
    var chatPaddingRight = parseInt(chat.css('padding-right'), 10);

    var offsetX = getTextWidth(chatText);
    var maxTypeWidth = chat.width();
    if (offsetX > maxTypeWidth) {
      offsetX = maxTypeWidth - 1;
    }

    offsetX = offsetX - 1
              - getTextWidth(lastWord)
              + chatPaddingLeft
              - parseInt(suggestion.css('padding-left'), 10);

    suggestion.text(mentionSuggestion.name);
    $(document.body).append(suggestion[0]);
    suggestion.css({
      left: chat.offset().left + offsetX,
      top: chat.offset().top - 15,
    });
  }

  $('#chat-input').on('input', function() {
    updateMentionSuggestion();
  });

  $('#chat-input').keydown(function(e) {
    if ((e.which === keys.TAB || e.which === keys.UP)
        && mentionSuggestion !== null) {
      completeMention();
      e.preventDefault();
    }
  });

  // Client chat message submission
  $('#chat').submit(function() {
    var msg = $('#chat-input').val();
    var username = getCookie('username');
    if (username == '') {
      alert('You must be logged in to chat.')
    } else {
      socket.emit('chat message', {
        text: msg,
        user: username
      });
    }
    $('#chat-input').val('');
    updateMentionSuggestion();
    return false;
  });
  
  $('#document').ready(function() {
    $('#chat-input').focus();
  });

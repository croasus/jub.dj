div(class='panel panel-default', id='player-panel')
  table(class='table', id='player-banner')
  div(class='panel-body')
    div(id='player', style="z-index: 1;")
    div(id='player-shield', style="z-index: 2;")
      span(id='player-hidden-splash', class='glyphicon glyphicon-sunglasses')
  table(class='table', id='player-footer')
    tbody
      tr
        td(id='like-dislike-td')
          div(class='input-group input-group-md')
            button(class='btn btn-default', type='button', id='like-btn',
                   data-toggle='tooltip', data-placement='top',
                   title='Hoot!')
              span(id='like-icon', class='glyphicon glyphicon-star')
              span(id='num-likes', style='margin-left: 4px;') 0
              //button(class='btn btn-default', type='button', id='dislike-btn',
              //       data-toggle='tooltip', data-placement='top',
              //       title='K.')
              //  span(id='dislike-icon', class='glyphicon glyphicon-thumbs-down')
              //  span(id='num-dislikes', style='margin-left: 4px;') 0
            button(class='btn btn-default right',type='button',
                   id='skip', data-toggle='tooltip',
                   data-placement='bottom', title='Skip')
              span(id='skip-icon', class='glyphicon glyphicon-fast-forward')
        td(id='player-buttons-td', style="width: 80%")
          div(class='input-group input-group-md right', style="position:relative;")
            button(class='btn btn-default',type='button',
                  style="display: inline-block",
                  id='mute', data-toggle='tooltip',
                  data-placement='bottom', title='Mute'
                  onclick="onMuteClick()")
              span(id='mute-icon', class='glyphicon glyphicon-volume-off')
            input(id='volume-slider' type="range",
                  style="width: 100px; display: inline-block",
                  min='0', step="1", max='100', value='50',
                  oninput="onVolumeSliderChange(parseInt(this.value))"
                  onchange="saveVolume(parseInt(this.value))")
            button(class='btn btn-default',type='button',
                   id='hide-video', data-toggle='tooltip',
                   data-placement='bottom', title='Hide video')
              span(id='hide-video-icon', class='glyphicon glyphicon-eye-open')
            //button(class='btn btn-default',type='button',
            //       id='fullscreen', data-toggle='tooltip',
            //       data-placement='bottom', title='Fullscreen (Esc to exit)')
            //  span(id='fullscreen-icon', class='glyphicon glyphicon-fullscreen')

script.

  var myVideoState = {};

  var PLAYER_STATE = {
    //-1: 'unstarted',
    0: 'ended',
    1: 'playing',
    2: 'paused',
    3: 'buffering',
    5: 'video cued',
  }

  var DEFAULT_VOLUME = 75;

  function saveVolume(value) {
    if (value > 0) {
      setCookie('volume', value);
    }
  }

  function setVolumeSlider(level) {
    var elem = document.querySelector('#volume-slider');
    elem.value = level;
    if (vendor().css.lowercase === 'moz') {
      // TODO doesn't work
      elem.style.backgroundImage = [
        '-moz-linear-gradient(',
        'left top, ',
        'right top, ',
        'color-stop(' + level / 100 + ', #654784), ',
        'color-stop(' + level / 100 + ', #333)',
        ')'
      ].join('');
    } else {
      elem.style.backgroundImage = [
        '-webkit-gradient(',
        'linear, ',
        'left top, ',
        'right top, ',
        'color-stop(' + level / 100 + ', #654784), ',
        'color-stop(' + level / 100 + ', #333)',
        ')'
      ].join('');
    }
  }

  // Does NOT update slider view.
  // Note that player stores its own state for both mute and volume level, but
  // we want the slider to show 0 when 'mute' is pressed, even though the
  // player's value for volume is not 0.
  function setVolume(level) {
    if (player) {
      player.setVolume(level);
    }
  }

  function drawHideVideoState() {
    // Use the cookie because when it transitions, it uses a fade effect
    if (getCookie('hide-video') == 1) {
      $('#hide-video-icon').attr('class', 'glyphicon glyphicon-eye-close');
      $('#hide-video').attr('title', 'Show video');
    } else {
      $('#hide-video-icon').attr('class', 'glyphicon glyphicon-eye-open');
      $('#hide-video').attr('title', 'Hide video');
    }
  }

  // Reads cookie and applies its setting
  function loadHideVideoState() {
    var hidden = (getCookie('hide-video') == 1);
    setPlayerVisible(!hidden, 0);
    drawHideVideoState();
  }

  $( document ).ready(function() {
    loadHideVideoState();
  });

  function drawMuteState(isMuted) {
    if (isMuted) {
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-off');
      $('#mute').attr('title', 'Unmute');
    } else {
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-up');
      $('#mute').attr('title', 'Mute');
    }
  }

  function setMute(isMuted) {
    if (isMuted) { player.mute(); } else { player.unMute(); }
    setCookie('muted', isMuted ? 1 : 0);
    drawMuteState(isMuted);
  }

  // Toggle mute state. Restore volume to last non-zero value.
  function onMuteClick() {
    if (!player) { return false; }
    var newState = !player.isMuted();
    var newVolume = newState ?  0 : getCookie('volume') || DEFAULT_VOLUME;
    setMute(newState);
    setVolumeSlider(newVolume);
    if($('#enable-mute-updates').is(":checked"))
      socket.emit('mute update', getUsername(), newState);
  }

  // callback for volume range slider
  function onVolumeSliderChange(value) {
    setVolume(value);
    setVolumeSlider(value);
    setMute(value === 0);
    return false;
  };

  // The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    var isMuted = getCookie('muted') == 1;
    var volume = getCookie('volume') || DEFAULT_VOLUME;
    setMute(isMuted);
    setVolume(volume);
    setVolumeSlider(isMuted ? 0 : volume);

    refreshSizes(true);
    socket.emit('video state');
    if($('#enable-mute-updates').is(":checked"))
      socket.emit('mute update', getUsername(), isMuted);
  }

  // The API calls this function when the player's state changes.
  // The function indicates that when playing a video (state=1),
  // the player should play for six seconds and then stop.
  function onPlayerStateChange(event) {
    console.log('player state change to', event.data, PLAYER_STATE[event.data]);
    if (event.data == YT.PlayerState.PAUSED) {
      // TODO does this violate the youtube ToS?
      event.target.playVideo();
    } else if (event.data == YT.PlayerState.ENDED) {
      player.clearVideo();
    } else if (event.data == YT.PlayerState.PLAYING) {
      if (!myVideoState.id) {
        player.stopVideo();
      }
    }
  }
  function getPlayerShieldUp() {
    return $('#player-shield').css('display') !== 'none';
  }

  function setPlayerVisible(visible, fadeDuration) {
    if (typeof visible === 'undefined') { visible = true; }
    if (visible) {
      $('#player-shield').fadeOut(fadeDuration);
    } else {
      $('#player-shield').fadeIn(fadeDuration);
    }
  }

  // Skip
  $('#skip').on('click', function(e) {
    var user = getCookie('username');
    socket.emit('video skip', user);
    return false;
  });

  // Fullscreen
  $('#fullscreen').on('click', function(e) {
    var iframe = document.querySelector('#player');
    var requestFullScreen = iframe.requestFullScreen ||
                            iframe.mozRequestFullScreen ||
                            iframe.webkitRequestFullScreen;
    if (requestFullScreen) {
      console.log("requesting fullscreen", requestFullScreen);
      requestFullScreen.bind(iframe)();
    }
    return false;
  });

  // Hide video button - toggle player visibility and save new setting
  $('#hide-video').on('click', function(e) {
    e.preventDefault();
    var newHideState = !getPlayerShieldUp(); // Toggle it
    setPlayerVisible(!newHideState, 100);
    setCookie('hide-video', newHideState ? 1 : 0);
    drawHideVideoState();
    return false;
  });

  // Later, use this to make avatars dance
  function updateOpinions(opinions) {
    var likes = 0, dislikes = 0;
    if (opinions) {
      for (v of opinions) {
        if (v)
          likes += 1;
        else
          dislikes += 1;
      }
    }
    $('#num-likes').text(likes);
    $('#num-dislikes').text(dislikes);
  }

  socket.on('num likes', function(num) {
    $('#num-likes').text(num);
  });

  socket.on('num dislikes', function(num) {
    $('#num-dislikes').text(num);
  });

  // Like
  $('#like-btn').on('click', function(e) {
    socket.emit('like', getUsername());
    return false;
  });

  // Dislike
  $('#dislike-btn').on('click', function(e) {
    socket.emit('dislike', getUsername());
    return false;
  });

  // Start the specified video, starting at the correct time
  function applyVideoState(state) {
    if (!player) { return; }
    if (Object.keys(state) == 0) {
      $('#current-track').text("No one is playing.");
      player.stopVideo(); //probably someone hit skip with nobody next
      return;
    }

    var id = state.id;
    var startTime = state.startTime;
    var clipStartTime = 0;
    if(state.clipStartTime && ((state.serverTime - startTime + state.clipStartTime) < state.duration))
      clipStartTime = state.clipStartTime;
    var user = state.user;
    if (myVideoState.id != id || myVideoState.startTime != startTime) {
      myVideoState = {
        title: state.title,
        duration: state.duration,
        userColor: state.userColor,
        clipStartTime: state.clipStartTime,
        clipEndTime: state.clipEndTime,
        user: user,
        id: id,
        startTime: startTime,
      };
      var videoProgress = (state.serverTime - startTime + clipStartTime) / 1000;
      console.log("apply video state", id, videoProgress);
      if ((typeof id == 'string') && (typeof videoProgress == 'number')) {
        console.log('loading video');
        player.loadVideoById({
          'videoId': id,
          'startSeconds': videoProgress,
          'suggestedQuality': 'large'
        });
      } else {
        player.stopVideo();
      }
      updateTimeLeft();
      updateCurrentDj(state.user, state.userColor);
      updateCurrentTrack(state.title);
      updateOpinions(state.opinions);
    }
  }

  // Server tells us about video state changes
  socket.on('video state', function(videoState) {
    applyVideoState(videoState);
  });

  // Everything below here is boilerplate for the Google YT IFrame
  //

  // Load the IFrame Player API code, asynchronously
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Create an <iframe> (and YouTube player) after the API code downloads.
  var player = null;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      height: 290,
      width: 484,
      playerVars: {
        autoplay: 0,
        autohide: 1,
        controls: 0,
        rel: 0,
        disablekb: 1,
        modestbranding: 1,
        wmode: 'opaque',
        // TODO add 'origin' param; set it to my domain
        iv_load_policy: 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }
